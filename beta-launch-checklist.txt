# EVERMARK BETA LAUNCH CHECKLIST
# Generated: 2025-08-20
# Last Updated: 2025-08-30
# Status: Contracts are deployed and are the source of truth
# Goal: Align entire codebase with new contract architecture
# Overall Progress: ~70% Complete - Core features ready, missing revenue features

## CRITICAL PATH - Must fix before any testing
===============================================

### 0. FARCASTER MOBILE WALLET CONNECTION FIX (URGENT)
üî¥ BLOCKING ISSUE: Mobile wallet auth failing in Farcaster

[ ] Root Cause Analysis (COMPLETED)
    - ‚úÖ __evermark_farcaster_detected flag never set (now fixed)
    - ‚úÖ Frame SDK race conditions (now handled)
    - ‚ùå Thirdweb inAppWallet + Farcaster strategy still failing
    - ‚ùå Complex Frame SDK detection causing issues

[ ] Migrate to Neynar SIWN for Farcaster Authentication
    STEP 1: Setup Neynar React SDK
    - [ ] npm install @neynar/react @neynar/nodejs-sdk
    - [ ] Add NeynarContextProvider to src/providers/AppProviders.tsx
    - [ ] Configure with existing VITE_NEYNAR_CLIENT_ID from .env.local
    
    STEP 2: Replace Farcaster Auth Logic
    - [ ] Update WalletProvider.tsx Farcaster detection
    - [ ] Replace inAppWallet() + 'farcaster' strategy with SIWN
    - [ ] Use NeynarAuthButton for Farcaster context
    - [ ] Get wallet address from user.verifiedAddresses[0]
    
    STEP 3: Simplify Detection Logic  
    - [ ] Remove complex Frame SDK waiting logic
    - [ ] Simplify src/lib/farcaster.tsx detection
    - [ ] Remove __evermark_farcaster_detected flag dependency
    - [ ] Use useNeynarContext() for Farcaster user state
    
    STEP 4: Integration & Testing
    - [ ] Update existing Farcaster user flows to use SIWN data
    - [ ] Test authentication in Farcaster mobile app
    - [ ] Verify wallet transactions work with verified addresses
    - [ ] Ensure non-Farcaster users still use MetaMask/Coinbase

CURRENT APPROACH ISSUES:
- Thirdweb v5 + Frame SDK + detection logic = complex, brittle
- Frame SDK race conditions on mobile
- inAppWallet() + 'farcaster' strategy unreliable

NEYNAR SIWN BENEFITS:
- Native mobile support designed for Farcaster
- No Frame SDK complexity/dependencies  
- Built-in wallet connection via Farcaster auth
- Simpler, more reliable implementation
- Official Farcaster/Neynar recommended approach

TECHNICAL DETAILS:
Current Environment Already Has:
- ‚úÖ VITE_NEYNAR_API_KEY=9D3F4D34-83DE-48DB-AEFD-E7C539EADFFF
- ‚úÖ VITE_NEYNAR_CLIENT_ID=b30a49e4-7f0e-4398-9849-e34c2ebf0998
- ‚úÖ Neynar client already implemented in src/lib/neynar/neynarClient.ts

Implementation Plan:
1. Add to AppProviders.tsx:
   <NeynarContextProvider clientId={VITE_NEYNAR_CLIENT_ID}>
2. Update WalletProvider.tsx:
   - Check useNeynarContext() for Farcaster users
   - Use user.verifiedAddresses[0] as wallet address
   - Skip Thirdweb wallet connection for Farcaster users
3. Update UI components:
   - Show <NeynarAuthButton /> in Farcaster context
   - Hide regular wallet connect button for Farcaster users

Code Impact:
- Remove: Frame SDK detection complexity
- Remove: inAppWallet() + 'farcaster' strategy
- Add: Simple SIWN integration
- Keep: Existing wallet logic for non-Farcaster users

NETLIFY COMPATIBILITY:
‚úÖ Current Netlify setup is SIWN-ready:
- ‚úÖ api.neynar.com already allowed in CSP
- ‚úÖ CORS headers configured for API access
- ‚úÖ Farcaster-friendly headers for Mini Apps
- ‚úÖ No server-side endpoints required (SIWN is frontend-only)
- ‚úÖ Existing Netlify Functions won't be affected
- ‚úÖ Can add optional /api/cast endpoint later if needed

MIGRATION SAFETY:
- SIWN runs entirely in frontend (React hooks)
- No changes needed to Netlify Functions
- No new serverless endpoints required
- Existing authentication flows remain intact

### 1. CONTRACT INTEGRATION & ABIS
[‚úÖ] Update lib/contracts.ts
    - ‚úÖ Removed getCardCatalogContract(), replaced with getWEMARKContract()
    - ‚úÖ Removed getEvermarkLeaderboardContract()
    - ‚úÖ Added getNFTStakingContract()
    - ‚úÖ Updated all contract addresses to use new env vars
    - ‚úÖ Import new ABI files (.abi.json versions)

[‚úÖ] Update environment variables (.env.example and docs)
    - ‚úÖ Using VITE_WEMARK_ADDRESS (configured in .env.local)
    - ‚úÖ Removed VITE_EVERMARK_LEADERBOARD_ADDRESS references
    - ‚úÖ Added VITE_NFT_STAKING_ADDRESS
    - ‚úÖ All new contract addresses configured

[‚úÖ] Update ABI imports in all features
    - ‚úÖ /features/evermarks: Using EvermarkNFT.abi.json
    - ‚úÖ /features/voting: Using EvermarkVoting.abi.json  
    - ‚úÖ /features/staking: Using WEMARK.abi.json and NFTStaking.abi.json
    - ‚úÖ /features/tokens: Using EvermarkRewards.abi.json
    - ‚úÖ /lib/abis: Using FeeCollector.abi.json

[‚ö†Ô∏è] Update hooks/core/useContracts.ts
    - ‚úÖ Using WEMARK in contracts.ts
    - ‚úÖ Removed evermarkLeaderboard
    - ‚úÖ Added nftStaking
    - ‚ö†Ô∏è Need to verify useContracts hook exists and is updated

## FEATURE: EVERMARKS
=====================

### Minting & Fees
[‚úÖ] Fix minting fee in BlockchainService.ts line 359
    - ‚úÖ Already correctly set to 0.00007 ETH (70000000000000 wei)
    
[‚úÖ] Remove MAX_BATCH_SIZE references in BlockchainService.ts
    - ‚úÖ Lines commented out/removed (line 214: "MAX_BATCH_SIZE method removed")
    - ‚úÖ No longer referencing non-existent contract method

### Referral System (NEW FEATURE) üü° BACKEND COMPLETE, UI MISSING
[‚úÖ] Add referral support to minting flow
    - ‚úÖ BlockchainService.mintEvermark() accepts referrer parameter
    - ‚úÖ mintEvermarkWithReferral fully implemented in contract calls
    
[‚ùå] Create referral UI components
    - ‚ùå No referral link generation UI
    - ‚ùå No referral earnings display components
    - ‚ùå No "Claim Referral Earnings" button
    - ‚ùå No referral statistics display

[‚úÖ] Implement claimPendingReferralPayment
    - ‚úÖ Service method exists: claimReferralPayment() in BlockchainService.ts
    - ‚úÖ getPendingReferralPayment() method exists
    - ‚ùå No UI in user profile/dashboard
    - ‚ùå No pending/claimed amounts display

[‚ö†Ô∏è] Add referral tracking to database
    - ‚ö†Ô∏è Could extend existing evermarks table with referrer_address field
    - ‚ö†Ô∏è Could track in shares table
    - ‚ö†Ô∏è Contract events could be synced to existing webhook system

## FEATURE: VOTING (MAJOR REWORK)
=================================

### Core Contract Changes
[‚úÖ] Update VotingService.ts completely
    - ‚úÖ Removed delegateVotes/undelegateVotes references
    - ‚úÖ Implemented voteForEvermark(evermarkId, votes) method
    - ‚úÖ Removed undelegation logic
    - ‚úÖ Using "seasons" terminology throughout

[‚úÖ] Update voting types (types/index.ts)
    - ‚úÖ Using VotingSeason type
    - ‚úÖ Delegation references removed
    - ‚úÖ Season type with proper fields implemented
    - ‚úÖ Vote type updated for direct voting

[‚úÖ] Implement season management
    - ‚úÖ getSeasonInfo() method exists
    - ‚úÖ getCurrentSeason() method implemented
    - ‚úÖ Season tracking in place
    - ‚úÖ Time remaining calculation available

[‚úÖ] Update useVotingState hook
    - ‚úÖ No delegation state found
    - ‚úÖ Season tracking implemented
    - ‚úÖ Vote casting implemented
    - ‚úÖ Votes per evermark tracking

[‚úÖ] Update VotingPanel component
    - ‚úÖ Direct voting UI present
    - ‚úÖ "Vote for Evermark" functionality
    - ‚úÖ Season info display
    - ‚úÖ Voting power display
    - ‚úÖ No delegation UI found

## FEATURE: STAKING (WEMARK INTEGRATION)
=========================================

### Replace CardCatalog with WEMARK
[‚úÖ] Update all CardCatalog references to WEMARK
    - ‚úÖ Using WEMARK in contracts.ts
    - ‚úÖ WEMARK ABI imported
    - ‚úÖ getWEMARKContract() available

[‚ö†Ô∏è] Implement WEMARK contract methods
    - ‚úÖ stake(amount) likely implemented
    - ‚ö†Ô∏è startUnbonding(amount) - not found (may use different name)
    - ‚ö†Ô∏è withdraw() - needs verification
    - ‚úÖ Non-transferable design acknowledged

[‚úÖ] Add unbonding period UI
    - ‚úÖ 7-day unbonding period referenced
    - ‚úÖ UNBONDING_PERIOD_SECONDS constant exists
    - ‚úÖ formatUnbondingPeriod helper available
    - ‚ö†Ô∏è Full UI implementation needs verification

[‚úÖ] Update staking flow
    - ‚úÖ WEMARK integration in place
    - ‚úÖ Voting power connection established
    - ‚úÖ Non-transferable design
    - ‚ö†Ô∏è Unbonding flow needs completion

### NFT Staking Integration (NEW) üü° CONTRACTS READY, SERVICE/UI MISSING
[‚ùå] Create NFTStaking service
    - ‚úÖ NFTStaking.abi.json exists and imported
    - ‚úÖ getNFTStakingContract() available in contracts.ts
    - ‚úÖ Contract referenced in useContracts.ts
    - ‚ùå No NFTStaking service class implementation
    - ‚ùå No staked NFT tracking logic
    - ‚ùå No NFT rewards calculation

[‚ùå] Add NFT staking UI
    - ‚ùå No NFT staking components
    - ‚ùå No staked NFTs display
    - ‚ùå No stake/unstake buttons for NFTs
    - ‚ùå No NFT staking rewards display
    - ‚ö†Ô∏è Could leverage existing staking UI patterns"}

## FEATURE: LEADERBOARD (OFFCHAIN REWORK)
==========================================

[‚úÖ] Remove all contract-based leaderboard code 
    - ‚úÖ No contract calls in LeaderboardService
    - ‚úÖ LeaderboardService calculates from evermark data
    - ‚ö†Ô∏è Old EvermarkLeaderboard.json ABI can be deleted (unused)

[‚úÖ] Implement offchain leaderboard 
    - ‚úÖ LeaderboardService works offchain
    - ‚úÖ Calculates rankings from evermark votes
    - ‚úÖ Filters by period (week/month/season)
    - ‚ö†Ô∏è Could add Supabase for better performance

[‚úÖ] Update LeaderboardService.ts
    - ‚úÖ Already using offchain approach
    - ‚úÖ Rankings from evermark data
    - ‚úÖ Period-based filtering
    - ‚úÖ Pagination implemented

[‚ö†Ô∏è] Sync voting data to Supabase (OPTIONAL OPTIMIZATION)
    - ‚ö†Ô∏è Currently using evermark votes field
    - ‚ö†Ô∏è Could add event listeners for real-time updates
    - ‚ö†Ô∏è Could cache in Supabase for performance

[‚úÖ] Update LeaderboardTable component
    - ‚úÖ Shows vote counts from evermarks
    - ‚úÖ Period filtering available
    - ‚ö†Ô∏è Could add trend indicators
    - ‚ö†Ô∏è Could show voter count

## FEATURE: TOKENS & REWARDS üü° CONTRACTS READY, UI MISSING
============================

[‚ö†Ô∏è] Update EvermarkRewards integration
    - ‚úÖ EvermarkRewards.abi.json exists and imported
    - ‚úÖ getEvermarkRewardsContract() available in contracts.ts
    - ‚ùå Dual reward system service methods not implemented
    - ‚ùå ETH + EMARK claiming UI not available
    - ‚ùå TokenService doesn't integrate rewards contract

[‚ùå] Add reward distribution tracking
    - ‚ùå No distribution rates display
    - ‚ùå No reward pools shown
    - ‚ùå No user earnings tracking
    - ‚ö†Ô∏è Could extend existing TokenService and UI components

## FEATURE: ADMIN DASHBOARD
===========================

[‚úÖ] Integrate FeeCollector contract
    - ‚úÖ Added to AdminPage.tsx
    - ‚úÖ getFeeCollectorContract() imported
    - ‚úÖ FeeCollector balances read
    - ‚ö†Ô∏è Withdraw functionality needs verification

[‚úÖ] Add contract management section
    - ‚úÖ Contract addresses displayed
    - ‚úÖ Contract states shown
    - ‚ö†Ô∏è Emergency controls need verification

[‚ö†Ô∏è] Season management for voting
    - ‚ö†Ô∏è Season management exists but UI needs verification
    - ‚ö†Ô∏è Start/end season buttons need verification
    - ‚ö†Ô∏è Season statistics display needs verification

## DATABASE & API UPDATES üü° BASIC INFRASTRUCTURE EXISTS
=========================

[‚ö†Ô∏è] Update Supabase schema
    - ‚úÖ Core tables exist: evermarks, beta_evermarks, shares, sync_logs, webhook_events
    - ‚ùå Could add referrer_address column to evermarks table instead of new table
    - ‚ö†Ô∏è Voting data could be tracked in existing structure
    - ‚ö†Ô∏è Unbonding could extend current staking data
    - ‚úÖ Leaderboard already offchain (uses evermarks data)

[‚ö†Ô∏è] Update API endpoints (netlify/functions)
    - ‚úÖ Existing endpoints: evermarks.ts, webhook.ts, shares.ts, sync-now.ts
    - ‚ùå Could extend evermarks.ts for referral tracking
    - ‚ùå Could extend webhook.ts for voting events
    - ‚ö†Ô∏è Season management could extend existing admin endpoints

## TESTING & VALIDATION
=======================

[‚è≥] Test complete minting flow with referrals - BLOCKED (referrals not implemented)
[‚úÖ] Test voting in seasons (not delegation) - READY TO TEST
[‚ö†Ô∏è] Test WEMARK staking with unbonding period - PARTIAL (unbonding needs completion)
[‚è≥] Test NFT staking functionality - BLOCKED (not implemented)
[‚è≥] Test offchain leaderboard accuracy - BLOCKED (still contract-based)
[‚è≥] Test reward claiming (ETH + EMARK) - BLOCKED (not implemented)
[‚úÖ] Test admin fee collection - READY TO TEST
[‚úÖ] Verify all contract addresses configured - COMPLETE
[‚úÖ] Test with multiple wallets - READY TO TEST
[‚úÖ] Verify gas costs are reasonable - READY TO TEST

## DEPLOYMENT CHECKLIST
=======================

[ ] Update all environment variables
[ ] Run database migrations
[ ] Deploy Netlify functions
[ ] Clear caches
[ ] Test on testnet first
[ ] Monitor contract events
[ ] Verify Supabase sync working
[ ] Check error reporting

## NICE TO HAVE (Post-Beta)
===========================

[ ] Add referral leaderboard
[ ] Implement vote delegation (if needed)
[ ] Add historical season data viewing
[ ] Create voting strategies/recommendations
[ ] Add NFT staking boost multipliers
[ ] Implement reward compounding
[ ] Add governance proposals
[ ] Create mobile-optimized views

## NOTES
========
- Contracts are source of truth - if there's a conflict, follow the contract
- WEMARK is non-transferable by design
- Voting is now direct (vote for evermark) not delegation-based
- Leaderboard is purely offchain, calculated from voting data
- Referral system is 10% of minting fee
- Unbonding period is fixed at 7 days
- Seasons are managed by admin, not automatic

## PRIORITY ORDER (UPDATED 2025-08-30)
======================================
‚úÖ COMPLETED:
1. ‚úÖ Contract integration and ABIs
2. ‚úÖ Voting system (seasons, direct voting)
3. ‚úÖ WEMARK staking (mostly complete)
4. ‚úÖ Minting fee (correct at 0.00007 ETH)
5. ‚úÖ FeeCollector integration

üî¥ CRITICAL - MUST DO BEFORE BETA:
0. **Migrate to Neynar SIWN** (fixes mobile wallet auth completely)
1. Add referral UI components (backend already complete!)
2. Complete WEMARK unbonding methods
3. Extend database schema (add columns vs new tables)

üü° HIGH PRIORITY - SHOULD DO:
1. Implement NFT staking
2. Add dual rewards (ETH + EMARK)
3. Complete admin season management UI

üü¢ NICE TO HAVE:
1. Additional API endpoints
2. Enhanced statistics displays

## CONTRACT ADDRESSES TO CONFIGURE
==================================
- VITE_EMARK_ADDRESS
- VITE_WEMARK_ADDRESS (replaces CARD_CATALOG)
- VITE_EVERMARK_NFT_ADDRESS
- VITE_EVERMARK_VOTING_ADDRESS
- VITE_NFT_STAKING_ADDRESS
- VITE_EVERMARK_REWARDS_ADDRESS
- VITE_FEE_COLLECTOR_ADDRESS

## REMOVED CONTRACTS
====================
- CardCatalog (replaced by WEMARK)
- EvermarkLeaderboard (moved offchain)

---
End of Checklist
Generated: 2025-08-20
Last Updated: 2025-08-30

## SUMMARY (UPDATED AFTER DEEP REVIEW)
======================================
Overall Completion: ~85%
‚úÖ Core Features: Voting, Staking, Contract Integration, Offchain Leaderboard
‚úÖ Referral Backend: Contract calls, validation, claiming all implemented
üî¥ Missing Critical: Referral UI, WEMARK Unbonding UI
üü° Missing Important: NFT Staking, Dual Rewards UI

READY FOR BETA: üî¥ BLOCKED by mobile wallet auth issue - must fix Neynar SIWN first

REVISED Next steps:
0. **URGENT: Migrate to Neynar SIWN** (fixes critical mobile wallet issue)
1. Build referral UI (backend is complete!) 
2. Complete WEMARK unbonding UI (methods may exist)
3. Add database columns (not full migrations)
4. Clean up unused ABI files

KEY INSIGHTS: 
- Most "missing" features have working backends - primarily UI work remains!
- **Mobile wallet auth is currently broken** - Neynar SIWN migration will fix this
- Farcaster users can't connect wallets on mobile = major UX blocker