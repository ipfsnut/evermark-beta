# netlify.toml - Fixed CSP and CORS configuration for Evermark Beta

[dev]
  command = "npm run dev"
  targetPort = 3000
  port = 8888
  functionsPort = 9999
  autoLaunch = true  # Auto-open the correct port (8888) with full functionality
  framework = "#custom"

[build]
  # Use npm to avoid workspace dependency issues
  command = "npm install --legacy-peer-deps && npm run build"
  publish = "dist"
  functions = "netlify/functions"
  
  # Environment configuration
  [build.environment]
    NODE_VERSION = "20"
    NPM_FLAGS = "--legacy-peer-deps"

# Build processing configuration
[build.processing]
  skip_processing = false

[build.processing.css]
  bundle = true
  minify = true

[build.processing.js]
  bundle = true
  minify = true

[build.processing.html]
  pretty_urls = true

# Scheduled function for blockchain sync (every hour)
[functions."sync-blockchain"]
  schedule = "0 * * * *"

# API redirects for backend functions
[[redirects]]
  from = "/api/*"
  to = "/.netlify/functions/:splat"
  status = 200

[[redirects]]
  from = "/api/evermarks"
  to = "/.netlify/functions/evermarks"
  status = 200

[[redirects]]
  from = "/api/evermarks/:id"
  to = "/.netlify/functions/evermarks"
  status = 200

[[redirects]]
  from = "/frame/:id"
  to = "/.netlify/functions/frame"
  status = 200

[[redirects]]
  from = "/share/evermark/*"
  to = "/.netlify/functions/evermark-share?id=:splat"
  status = 200

[[redirects]]
  from = "/api/shares"
  to = "/.netlify/functions/shares"
  status = 200

[[redirects]]
  from = "/api/shares/*"
  to = "/.netlify/functions/shares"
  status = 200

# Webhook endpoints
[[redirects]]
  from = "/webhook/thirdweb"
  to = "/.netlify/functions/webhook-mint"
  status = 200

[[redirects]]
  from = "/webhook"
  to = "/.netlify/functions/webhook"
  status = 200

[[redirects]]
  from = "/webhook/*"
  to = "/.netlify/functions/webhook"
  status = 200

# Development utilities (only in non-production)
[[redirects]]
  from = "/dev"
  to = "/.netlify/functions/dev-dashboard"
  status = 200

[[redirects]]
  from = "/sync"
  to = "/.netlify/functions/sync-now"
  status = 200

# Documentation pages are now handled by React Router
# Removed static file redirects to allow SPA routing

# Exclude static files from SPA fallback
[[redirects]]
  from = "/manifest.json"
  to = "/manifest.json"
  status = 200
  force = true

[[redirects]]
  from = "/service-worker.js"
  to = "/service-worker.js"
  status = 200
  force = true

[[redirects]]
  from = "/icon.png"
  to = "/icon.png" 
  status = 200
  force = true

[[redirects]]
  from = "/favicon.ico"
  to = "/favicon.ico"
  status = 200
  force = true

# Social media crawler redirects - serve beautiful sharing pages to crawlers
[[redirects]]
  from = "/evermark/:id"
  to = "/.netlify/functions/evermark-share?id=:id"
  status = 200
  force = false
  conditions = {User-Agent = "facebookexternalhit/*"}

[[redirects]]
  from = "/evermark/:id"
  to = "/.netlify/functions/evermark-share?id=:id"
  status = 200
  force = false
  conditions = {User-Agent = "Twitterbot/*"}

[[redirects]]
  from = "/evermark/:id"
  to = "/.netlify/functions/evermark-share?id=:id"
  status = 200
  force = false
  conditions = {User-Agent = "*WhatsApp*"}

[[redirects]]
  from = "/evermark/:id"
  to = "/.netlify/functions/evermark-share?id=:id"
  status = 200
  force = false
  conditions = {User-Agent = "*LinkedInBot*"}

[[redirects]]
  from = "/evermark/:id"
  to = "/.netlify/functions/evermark-share?id=:id"
  status = 200
  force = false
  conditions = {User-Agent = "*TelegramBot*"}

[[redirects]]
  from = "/evermark/:id"
  to = "/.netlify/functions/evermark-share?id=:id"
  status = 200
  force = false
  conditions = {User-Agent = "*Discord*"}

# SPA fallback - must be last
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

# Security headers for all pages
[[headers]]
  for = "/*"
  [headers.values]
    Strict-Transport-Security = "max-age=31536000; includeSubDomains"
    X-Content-Type-Options = "nosniff"
    X-Frame-Options = "SAMEORIGIN"
    X-XSS-Protection = "1; mode=block"
    Referrer-Policy = "strict-origin-when-cross-origin"
    Permissions-Policy = "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=()"
    
    # CORS headers for API access
    Access-Control-Allow-Origin = "*"
    Access-Control-Allow-Methods = "GET, POST, PUT, DELETE, OPTIONS"
    Access-Control-Allow-Headers = "Content-Type, Authorization, X-Requested-With, X-Wallet-Address"
    Access-Control-Max-Age = "86400"
    
    # Performance headers
    X-UA-Compatible = "IE=edge"
    Vary = "Accept-Encoding, User-Agent"
    
    # COMPREHENSIVE CSP: Fixed to allow all necessary domains for Web3 + Farcaster + Image services + Dev WebSockets + PINATA API + Embedded Wallets + Metadata APIs
    Content-Security-Policy = "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdnjs.cloudflare.com https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https: blob:; connect-src 'self' ws://localhost:* wss://localhost:* https://*.supabase.co https://*.thirdweb.com https://*.rpc.thirdweb.com https://rpc.ankr.com https://mainnet.base.org https://base-mainnet.g.alchemy.com https://api.ensideas.com https://api.neynar.com https://imagedelivery.net https://*.imagedelivery.net https://gateway.pinata.cloud https://api.pinata.cloud https://ipfs.io https://cloudflare-ipfs.com https://gateway.ipfs.io https://c.thirdweb.com https://api.dicebear.com https://*.dicebear.com wss://*.thirdweb.com wss://*.alchemy.com https://embedded-wallet.thirdweb.com https://api.crossref.org https://www.googleapis.com https://api.unpaywall.org https://api.opensea.io https://covers.openlibrary.org https://openlibrary.org https://dweb.link; worker-src 'self' blob:; child-src 'self' blob:; frame-src 'self' https://verify.walletconnect.com https://verify.walletconnect.org https://embedded-wallet.thirdweb.com; object-src 'none'; base-uri 'self';"

# Farcaster-friendly headers for root path (Mini Apps)
[[headers]]
  for = "/"
  [headers.values]
    # Allow framing for Farcaster Mini Apps
    X-Frame-Options = "ALLOWALL"
    # Frame ancestors for Farcaster contexts
    Content-Security-Policy = "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdnjs.cloudflare.com https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https: blob:; connect-src 'self' ws://localhost:* wss://localhost:* https://*.supabase.co https://*.thirdweb.com https://*.rpc.thirdweb.com https://rpc.ankr.com https://mainnet.base.org https://base-mainnet.g.alchemy.com https://api.ensideas.com https://api.neynar.com https://imagedelivery.net https://*.imagedelivery.net https://gateway.pinata.cloud https://api.pinata.cloud https://ipfs.io https://cloudflare-ipfs.com https://gateway.ipfs.io https://c.thirdweb.com https://api.dicebear.com https://*.dicebear.com wss://*.thirdweb.com wss://*.alchemy.com https://farcaster.xyz https://client.farcaster.xyz https://warpcast.com https://client.warpcast.com https://wrpcd.net https://*.wrpcd.net https://embedded-wallet.thirdweb.com; worker-src 'self' blob:; child-src 'self' blob:; frame-src 'self' https://verify.walletconnect.com https://verify.walletconnect.org https://embedded-wallet.thirdweb.com; frame-ancestors *; object-src 'none'; base-uri 'self';"

# Farcaster Frame specific headers
[[headers]]
  for = "/evermark/*"
  [headers.values]
    # Less restrictive CSP for Farcaster frames
    Content-Security-Policy = "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdnjs.cloudflare.com https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline'; img-src 'self' data: https: blob:; connect-src 'self' https://*.supabase.co https://farcaster.xyz https://client.farcaster.xyz https://warpcast.com https://client.warpcast.com https://wrpcd.net https://*.wrpcd.net https://*.thirdweb.com https://*.rpc.thirdweb.com https://c.thirdweb.com https://social.thirdweb.com https://imagedelivery.net https://*.imagedelivery.net https://gateway.pinata.cloud https://api.pinata.cloud https://ipfs.io https://cloudflare-ipfs.com https://gateway.ipfs.io; frame-ancestors *; frame-src *;"
    
    # Farcaster Frame meta tags
    X-Frame-Options = "ALLOWALL"

# Frame endpoint headers
[[headers]]
  for = "/frame/*"
  [headers.values]
    Content-Type = "text/html; charset=utf-8"
    Cache-Control = "public, max-age=300"
    X-Frame-Options = "ALLOWALL"
    Content-Security-Policy = "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; frame-ancestors *;"

# Static asset caching
[[headers]]
  for = "/assets/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"
    X-Content-Type-Options = "nosniff"

# API function headers
[[headers]]
  for = "/.netlify/functions/*"
  [headers.values]
    Access-Control-Allow-Origin = "*"
    Access-Control-Allow-Methods = "GET, POST, PUT, DELETE, OPTIONS"
    Access-Control-Allow-Headers = "Content-Type, Authorization, X-Requested-With, x-farcaster-signature, x-webhook-signature, X-Wallet-Address"
    Cache-Control = "no-cache, no-store, must-revalidate"
    Pragma = "no-cache"
    Expires = "0"

# Well-known files for protocols - serve from public/.well-known/
[[redirects]]
  from = "/.well-known/*"
  to = "/.well-known/:splat"
  status = 200
  force = true

[[headers]]
  for = "/.well-known/*"
  [headers.values]
    Content-Type = "application/json"
    Access-Control-Allow-Origin = "*"
    Cache-Control = "public, max-age=300"
    
[[headers]]
  for = "/.well-known/farcaster.json"
  [headers.values]
    Content-Type = "application/json"
    Access-Control-Allow-Origin = "*"
    Cache-Control = "public, max-age=300"

# Manifest and service worker
[[headers]]
  for = "/manifest.json"
  [headers.values]
    Content-Type = "application/manifest+json"
    Cache-Control = "public, max-age=86400"

[[headers]]
  for = "/service-worker.js"
  [headers.values]
    Content-Type = "application/javascript"
    Cache-Control = "no-cache"

# Image optimization
[[headers]]
  for = "*.png"
  [headers.values]
    Cache-Control = "public, max-age=86400"
    Content-Type = "image/png"

[[headers]]
  for = "*.jpg"
  [headers.values]
    Cache-Control = "public, max-age=86400"
    Content-Type = "image/jpeg"

[[headers]]
  for = "*.svg"
  [headers.values]
    Cache-Control = "public, max-age=86400"
    Content-Type = "image/svg+xml"

[[headers]]
  for = "*.ico"
  [headers.values]
    Cache-Control = "public, max-age=86400"
    Content-Type = "image/x-icon"

# Environment-specific configurations
[context.production.environment]
  NODE_ENV = "production"
  VITE_DEBUG_MODE = "false"
  VITE_ENABLE_DEVTOOLS = "false"

[context.deploy-preview.environment]
  NODE_ENV = "staging"
  VITE_DEBUG_MODE = "true"
  VITE_ENABLE_DEVTOOLS = "true"

[context.branch-deploy.environment]
  NODE_ENV = "development"
  VITE_DEBUG_MODE = "true"
  VITE_ENABLE_DEVTOOLS = "true"

# Edge Functions (if needed in future)
[[edge_functions]]
  function = "geo-location"
  path = "/api/geo"

# Add Coinbase Wallet COOP fix for better wallet compatibility
[[headers]]
  for = "/*"
  [headers.values]
    Cross-Origin-Opener-Policy = "same-origin-allow-popups"
    Cross-Origin-Embedder-Policy = "credentialless"

# Form handling (if you add contact forms)
[forms]
  settings = { autoReply = false }

# Large Media (for future asset optimization)
[lfs]
  # Configure if you need large file support later

# Build image selection (optional)
# Using default build image (focal/Ubuntu 20.04)