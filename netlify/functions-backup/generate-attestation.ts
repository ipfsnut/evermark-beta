import type { Handler } from '@netlify/functions';

export const handler: Handler = async (event, context) => {
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  try {
    const { token_id } = JSON.parse(event.body || '{}');
    
    if (!token_id) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: 'token_id is required' })
      };
    }

    // Fetch evermark data
    const evermarkResponse = await fetch(`${process.env.URL}/api/evermarks/${token_id}`);
    if (!evermarkResponse.ok) {
      throw new Error('Evermark not found');
    }

    const { evermark } = await evermarkResponse.json();
    
    // Generate attestation document
    const attestationData = await generateAttestationData(evermark);
    const attestationText = formatAttestationText(attestationData);
    
    // For now, return as text. Later we can generate PDF/image
    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'text/plain',
        'Content-Disposition': `attachment; filename="evermark-${token_id}-attestation.txt"`
      },
      body: attestationText
    };

  } catch (error) {
    console.error('Attestation generation error:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({ 
        error: 'Failed to generate attestation',
        details: error instanceof Error ? error.message : 'Unknown error'
      })
    };
  }
};

async function generateAttestationData(evermark: any) {
  // Calculate content hash
  const dataString = JSON.stringify({
    tokenId: evermark.token_id,
    title: evermark.title,
    author: evermark.author,
    sourceUrl: evermark.source_url,
    contentType: evermark.content_type,
    createdAt: evermark.created_at,
    metadataURI: evermark.token_uri
  });

  // Simple hash for server environment
  const contentHash = Buffer.from(dataString).toString('base64').slice(0, 32);

  return {
    evermarkId: evermark.token_id,
    title: evermark.title,
    author: evermark.author,
    contentType: evermark.content_type,
    sourceUrl: evermark.source_url,
    tokenId: evermark.token_id,
    creatorAddress: evermark.owner,
    txHash: evermark.tx_hash,
    blockNumber: evermark.block_number,
    createdAt: evermark.created_at,
    verificationStatus: evermark.verified ? 'verified' : 'unverified',
    verificationMethod: evermark.verified && evermark.content_type === 'Cast' ? 'automatic' : 'manual',
    metadataUri: evermark.token_uri,
    ipfsImageHash: evermark.ipfs_image_hash,
    contentHash,
    networkInfo: {
      chainId: 8453,
      networkName: 'Base',
      contractAddress: process.env.VITE_EVERMARK_NFT_ADDRESS || '0x[contract]'
    }
  };
}

function formatAttestationText(data: any): string {
  const verificationSymbol = data.verificationStatus === 'verified' ? '✓ VERIFIED' : '○ UNVERIFIED';
  const verificationReason = data.verificationMethod === 'automatic' ? 
    '(Author created own content)' : 
    `(${data.verificationMethod.toUpperCase()})`;

  return `EVERMARK AUTHENTICITY ATTESTATION
═══════════════════════════════════════════════

CONTENT PRESERVATION CERTIFICATE

Title: "${data.title}"
Author: ${data.author}
Content Type: ${data.contentType}
Source: ${data.sourceUrl}

BLOCKCHAIN VERIFICATION
━━━━━━━━━━━━━━━━━━━━━━━━
Token ID: #${data.tokenId}
Contract: ${data.networkInfo.contractAddress}
Network: ${data.networkInfo.networkName} (Chain ID: ${data.networkInfo.chainId})
Transaction: ${data.txHash}
${data.blockNumber ? `Block: ${data.blockNumber}` : ''}
Created: ${new Date(data.createdAt).toLocaleDateString('en-US', { 
  year: 'numeric', 
  month: 'long', 
  day: 'numeric' 
})}

CREATOR VERIFICATION
━━━━━━━━━━━━━━━━━━━━
Creator: ${data.creatorAddress}
Status: ${verificationSymbol} ${verificationReason}
Method: ${data.verificationMethod}

CONTENT PRESERVATION
━━━━━━━━━━━━━━━━━━━━━
IPFS Metadata: ${data.metadataUri}
${data.ipfsImageHash ? `Image Hash: ${data.ipfsImageHash}` : ''}
Content Hash: ${data.contentHash}

This document certifies that the above content has been
permanently preserved on the blockchain and IPFS network.

Generated by Evermark Protocol
https://evermarks.net/verify/${data.tokenId}
═══════════════════════════════════════════════`;
}